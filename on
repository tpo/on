#!/bin/bash
## -------------------------------------------------------------------------
# Autor:    Tomas Pospisek
# Revision 1.9 went into git
# -------------------------------------------------------------------------

# -------------------------------------------------------------------------
# usage
# -------------------------------------------------------------------------

[ "$DEBUG" ] && set -x

function usage() {
   cat<<EOH
SYNOPSIS
  on [options] host_list [as remote_user] command
  on           host_list                  list

  COMMANDS
    do    "some; commands and -options"
    get   /remote/file [/local/file]
    put   /local/file [/remote/file]
    exec  /local/file ["some args"]*
    term
    list

DESCRIPTION

    on executes "command" on one or more hosts defined by host_list.

    host_list is a list of host names separated by spaces. A host_list
    can also contain host_groups which will be expanded first. A
    host_group declaration will override a host of the same name. See
    CONFIGURATION below for host_group.

    The hosts can not be named "as", "do", "get", "put", "exec", "term"
    or "list". In case you use such names you need to alias them through
    a host_group.

    The command is allways executed sequentially, one host after the other.

    remote_user is not allowed to contain any metacharacters such as spaces.

    on is only really usefull if you distribute your ssh key to the
    target hosts.

COMMANDS
    do    will execute the commands and parameters passed to the
          command as last parameter on the remote machines

    get   will copy the /remote/file from the given remote machines
          onto the local machine. If /local/file is not given, then
          the file will be copied to the same path as the remote file is.

          Relative remote/file paths will be copied to relative paths
          *starting from the current working directory*, same as scp would.

          The files will be given a postfix consisting of the name of the
          host the were fetched from.

    put   will copy the /local/file to given remote machines. If
          /remote/file is not given, then the file will be copied to
          the same path as /local/file. Since we're using scp to do
          the copying, giving a /local/file with a relative path and
          omitting the /remote/file the file will be put into the
          relative path starting from the HOME directory!

    exec  will execute the given local file with the arguments that
          follow on the remote machines

    list  will resolve the hosts - that is list the machines that
          are part of the host_list. Useful for debugging your config.

    term  will open a terminal (shell) on each remote machine

OPTIONS
    -v be verbose on what on is doing (on which hosts!)

    -i interactive - stdin from the terminal will be forwarded to the
       remote session. Only available with the "exec" and "do" commands.

    -f (as in force) ignore errors when executing the "do", "get", "put"
       or "exec" commands. Just continue on the next host. Default is to
       abort on error.

    -o "SSH OPTIONS"
       options for ssh, will be passed on as is to ssh like this:
       ssh -o "SSH OPTIONS" ...

    -p prefix all output with hostname. Default is to display the output
       (stdout) unchanged. This option does not apply to the "get" and
       "put" commands.

CONFIGURATION
    on will source ~/.on.config on startup. There you can define variables
    that define host_groups. If f.ex. you have a ~/.on.config that contains:

        my_servers="server1 server2"

    then you can call on like this:

        on my_servers do ls

    Since ~/.on.config is being sourced, you can use bash scripting there
    at will f.ex. to define groups of groups etc.

    Note that the my_servers declatation will override a possibly existing
    host with the strange name "my_servers".

    ANSIBLE

    If you want to reuse the host group definitions from ansible, then add
    this line to your ~/.on.config:

        parse_ansible_host_config [path_to_ansible_host_file]

    If you do not provide the 'path_to_ansible_host_file' argument, then on
    will read the default ansible host configuration file '/etc/ansible/hosts'.

    Note that dashes in group names will be replaced by underscores. A group
    named 'lxc-vms' will thus become 'lxc_vms'.

ENVIRONMENT
    Setting DEBUG will execute on with the -x bash flag set.

COPYRIGHT
    Copyright Â© 2012 Tomas Pospisek.
    License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
    This is free software: you are free to change and redistribute it.
    There is NO WARRANTY, to the extent permitted by law.

AUTHOR
    Tomas Pospisek <tpo_deb@sourcepole.ch>

EOH
   exit 1
}

# -------------------------------------------------------------------------
# further documentation
# -------------------------------------------------------------------------
# [1] on redirection:
#     http://tldp.org/LDP/abs/html/io-redirection.html
#     http://tldp.org/LDP/abs/html/ioredirintro.html
#     http://www.zsh.org/mla/users/2003/msg00941.html

#--------------------------------------------------------------
# comman line parameters
# global variables that are set once only in the parse_parameters
# function
#--------------------------------------------------------------

be_verbose=
ignore_error=
interactive=
prefix_with_hostname=
host_list=
remote_user=
command=
do_commandline=      # only set with the 'do'                    command
local_file=          #         "         'get', 'put' and 'exec' commands
remote_file=         #         "         'get', 'put' and 'exec' commands

# exec_params is an array
declare -a exec_params
exec_params=         #         "         'exec'          command

#--------------------------------------------------------------
# global variable - set by do_remote, used by exec_remote
# err_status can be masked out by a local variable err_status!
#--------------------------------------------------------------
err_status=0

#--------------------------------------------------------------
# functions
#--------------------------------------------------------------

# add_to_list "a" "b" -> "a b"
# add_to_list ""  "b" -> "b"
# add_to_list "a" "b" -> "a b"
# add_to_list ""  ""  -> ""
#
function add_to_list() {
   if [ "$1" = "" -o "$2" = "" ]; then
      echo "$1$2"
   else
      echo "$1 $2"
   fi
}

function reset_parameters() {
   be_verbose=false
   ignore_error=false
   interactive=non-interactive
   ssh_options=
   prefix_with_hostname=false
   host_list=
   remote_user=
   command=
   do_commandline=
   local_file=
   remote_file=
   exec_params=( )
}

function parse_parameters() {
   [ "$1" == "--help" ] && usage
   # parse options
   while [[ "$1" && "$1" =~ ^- ]]; do
      case "$1" in
         -v) be_verbose=true;;
         -i) interactive=interactive;;
         -f) ignore_error=true;;
         -o) ssh_options="$2"; shift;;
         -p) prefix_with_hostname=true;;
         *)  usage ;;
      esac
      shift
   done
   # read host names
   while [ "$1" ]; do
      case "$1" in
         as|as|do|get|put|exec|term|list)
            break
            ;;
      esac
      host_list=$( add_to_list "$host_list" "$1" )
      shift
   done
   if [ "$1" == "as" ]; then
      shift
      remote_user="$1"
      shift
   fi
   command=$1
   shift
   case "$command" in
      do)
         do_commandline="$1" ;;
      get)
         remote_file="$1"
         shift
         local_file="$1"
         if [ ! "$local_file" ]; then
            local_file="$remote_file"
         fi
         ;;
      put)
         local_file="$1"
         shift
         remote_file="$1"
         if [ ! "$remote_file" ]; then
            remote_file="$local_file"
         fi
         ;;
      exec)
         local_file="$1"
         shift
         exec_params=( "$@" ) # array copy
         ;;
      list)
         ;;
      term)
         ;;
      *)
         usage ;;
   esac
   # debug_parameters
}

# prefix output with hostname if so configured
#
function prefix_with() {
   local hostname="$1"

   if [ "$prefix_with_hostname" == "true" ]; then
      awk '{ print "'${hostname}': " $0 }'
   else
      cat
   fi
}

# by default aborts if an error happens when doing something on a remote
# host. If user requests not aborting with -f switch nothing will happen.
#
function on_error() {
   local host="$1"
   local err_status="$2"

   if [ "$err_status" -ne "0" -a "$ignore_error" = "false" ]; then
      echo "Aborting due to error on host ${host} (exit status ${err_status})" >&2
      exit $err_status
   fi
}

# do_remote host_list "non-interactive"|"interactive" ssh_options commandline
#
# execute commandline on all hosts in host_list. Open connection
# in "terminal mode" if the third parameter is set as 'interactive'.
# Will set the global $err_status variable.
#
# Ex:
#
#    do_remote "mail1 root@mail2"  non-interactive  "Port=2223" "cat /etc/shadow"
#    do_remote "webserver"             interactive  ""          "dpkg-reconfigure apache2"
#
function do_remote() {
   local host_list="$1"
   shift
   local interactive="$1"
   shift
   local ssh_options="$1"
   shift
   local commandline="$1"
   shift
   # additiona params are now in $@

   local terminal=
   if [ "$interactive" == "interactive" ]; then
      terminal="-t"
   else
      if read -t 0; then
         # if there's input on stdin then swallow it
         # in order to be able to pass it on to each host
         stdin=$( cat )
      fi
   fi

   if [ "$ssh_options" ]; then
      ssh_options="-o $ssh_options"
   fi

   exec 3>&1 # save original stdout into fd 3
   exec 4>&2 # save original stderr into fd 4, see [1]

   for host in $host_list; do
      debug "Executing: ssh $ssh_options ${host} \"$commandline\""
      if [ "$stdin" ]; then
         if [[ "${@:+isset}" == "isset" ]]; then
            echo -n "$stdin" | ssh $terminal $ssh_options ${host} "$commandline" "$@" \
                > >( prefix_with $host >&3 )                             \
               2> >( prefix_with $host >&4 )
         else
            echo -n "$stdin" | ssh $terminal $ssh_options ${host} "$commandline"      \
                > >( prefix_with $host >&3 )                             \
               2> >( prefix_with $host >&4 )
         fi
      else
         if [[ "${@:+isset}" == "isset" ]]; then
            ssh $terminal $ssh_options ${host} "$commandline" "$@" \
                > >( prefix_with $host >&3 )          \
               2> >( prefix_with $host >&4 )
         else
            ssh $terminal $ssh_options ${host} "$commandline"      \
                > >( prefix_with $host >&3 )          \
               2> >( prefix_with $host >&4 )
         fi
      fi
      # set global $err_status, used by exec_remote
      err_status=$?
      on_error $host $err_status
   done
}

# put_on_remote host_list local_file remote_file
#
# copy local_file to remote_file on all hosts in host_list.
#
# Ex:
#
#    put_on_remote "sun" fuse /tmp/fuse
#
function put_on_remote() {
   local host_list="$1"
   local ssh_options="$2"
   local local_file="$3"
   local remote_file="$4"

   if [ "$ssh_options" ]; then
      ssh_options="-o $ssh_options"
   fi

   for host in $host_list; do
      debug "Executing: scp $ssh_options \"$local_file\" \"${host}:${remote_file}\""
      scp $ssh_options "$local_file" "${host}:${remote_file}"
      on_error $host $?
   done
}

# get_from_remote host_list remote_file local_file
#
# copy remote_file from all hosts in host_list to local_file_$hostname
#
# Ex:
#
#    get_from_remote "root@mil" /etc/passwd passwd
#
function get_from_remote() {
   local host_list="$1"
   local ssh_options="$2"
   local remote_file="$3"
   local local_file="$4"

   if [ "$ssh_options" ]; then
      ssh_options="-o $ssh_options"
   fi

   for host in $host_list; do
      debug "Executing: scp $ssh_options \"${host}:${remote_file}\" \"${local_file}_${host}\""
      scp $ssh_options "${host}:${remote_file}" "${local_file}_${host}"
      on_error $host $?
   done
}

# exec_remote host_list "non-interactive"|"interactive" \
#             ssh_options local_file exec_params*
#
# copy local_file to all hosts in host_list and execute the
# file there with arguments exec_params. Open connection in
# "terminal mode" if the third parameter is set as 'interactive'.
#
# Ex:
#
#    exec_remote "server1 server2 server3" interactive ssh_options /tmp/clean_up file1 file2
#
function exec_remote() {
   local host_list="$1"
   shift
   local interactive="$1"
   shift
   local ssh_options="$1"
   shift
   local local_file="$1"
   shift
   # exec_params are in $@ now

   local file_name=$( basename "$local_file" )

   if [ "$ssh_options" ]; then
      local_ssh_options="-o $ssh_options"
   fi

   # see: http://ninjaverification.wordpress.com/2008/12/17/wrapping-ssh-inside-a-script-and-passing-arbitrary-commands-to-another-program/
   for host in $host_list; do
      debug "On ${host} remotely executing \"$dir/$file_name\"" "$@"
      dir=$( ssh ${host} "mktemp -d" )
      on_error $host $?
      scp -q $local_ssh_options "$local_file" "${host}:$dir/$file_name"
      on_error $host $?

      tmp_ignore_error=$ignore_error
      ignore_error=true
         # will set $err_status
         if [[ "${@:+isset}" == "isset" ]]; then
            do_remote $host $interactive $ssh_options "$dir/$file_name" "$@"
         else
            do_remote $host $interactive $ssh_options "$dir/$file_name"
         fi
      ignore_error=$tmp_ignore_error

      ssh $local_ssh_options ${host} "rm -r $dir"
      rm_err_status=$?
      on_error $host $err_status
      on_error $host $rm_err_status
   done
}

# call_term host_list
#
# open a terminal on one host after the other on each of the hosts
# in host_list.
#
# Ex:
#
#    call_term "server1 server2 php_admin@server3"
#
function call_term() {
   local host_list="$1"
   local ssh_options="$2"

   if [ "$ssh_options" ]; then
      ssh_options="-o $ssh_options"
   fi

   for host in $host_list; do
      debug "Opening terminal to ${host}"
      (
        ssh -t $ssh_options ${host}
      ) | prefix_with $host
   done
}

function resolve_hosts() {
   local in_host_list="$1"
   local remote_user="$2"
   local out_host_list     # "tpo@mail root@www"
   local host              # "tpo@mail" -> "mail"
   local hosts             # "mail www"
   local user              # "tpo"

   while [ "$in_host_list" ]; do
      host=$(         echo "$in_host_list" | cut -d " " -f 1    )
      in_host_list=$( echo "$in_host_list" | cut -d " " -f 2- -s)

      # split off usernames from hosts
      if [[ "$host" =~ @ ]]; then
         user=$( echo "$host" | cut -d @ -f 1  )
         host=$( echo "$host" | cut -d @ -f 2- )
      else
         user="$remote_user"
      fi

      # If the user defines a variable with a name
      # that corresponds to the parameter given,
      # then use the value of that variable. I.e. we
      # are resolving host_groups.

      if [[ "$host" =~ -|\. ]]; then
         # if host contains a '-' or a '.' then that can't be a
         # valid bash variable aka a host_group and thus it's a host
         hosts="$host"
      else
         hosts=$( eval echo -n \$$host )
         if [ ! "$hosts" ]; then
            # there's no variable of that name, thus take it
            # as a host name
            hosts="$host"
         fi
      fi

      if [ "$user" ]; then
         user="${user}@"
      fi

      # add user back to hosts
      for host in $hosts; do
         out_host_list=$( add_to_list "$out_host_list" "$user""$host" )
      done

   done

   echo "$out_host_list"
}

#--------------------------------------------------------------
# parse ansible hosts configuration file
#
# this function can be used from the ~/.on.config file
#--------------------------------------------------------------

# parse ansible host configuration and
# set host variables appropriately for 'on'
#
# call like this:
#
#     parse_ansible_host_config [path_to_config_file]
#
# if 'path_to_config_file' is not set, then the default
# ansible host config file '/etc/ansible/hosts' is used

function parse_cfg() {
  local cfg="$1"
  local ignore_hosts=false
  local current_group=
  local all=

  # read line by line
  # - delete comments
  # - delete additional configuration after host names,
  #   that is everything after a space
  # - delete empty lines
  cat "$cfg" | sed 's/#.*//' | sed 's/ .*//' | sed '/^$/d' | \
    while read line; do

      # ansible host group declaration: [foo]
      if   [[ "$line" =~ ^\[ ]]; then
        ignore_hosts=false

        # ansible host group variables or such: [foo:vars]
        if [[ "$line" =~ : ]]; then
          debug "vars   : $line"
          ignore_hosts=true

        # ansible host group : [foo]
        else
          debug "group  : $line"
          # tr: [foo-bar] -> foo_bar
          current_group=$( echo "$line" | tr -d '[' | tr -d ']' | tr '-' '_' )
          #debug "current_group=$current_group"
        fi

      # ansible host
      else

        if [ "$ignore_hosts" == "true" ]; then
          debug "ignore : $line"
        else
          debug "host   : $line"

          if [ -z "$all" ]; then
            all="$line"
          else
            all="$all $line"
          fi
          assignement="all='$all'"
          echo "$assignement"
          debug "$assignement"

          if [ "$current_group" ]; then
            group_hosts="$( eval "echo \"\$$current_group\"" )"
            if [ -z "$group_hosts" ]; then
              eval "$current_group=\"$line\""
            else
              eval "$current_group=\"\$group_hosts $line\""
            fi

            assignement="$current_group='$( eval "echo \"\$$current_group\"" )'"
            echo  "$assignement"
            debug "$assignement"
          fi
        fi

      fi
    done
}

function parse_ansible_host_config() {
  # default
  local cfg=/etc/ansible/hosts

  if [ "$1" ]; then
    cfg="$1"
  fi

  eval "$( parse_cfg "$cfg" )"
}

#--------------------------------------------------------------
# functions used for debugging und unit-tests
#--------------------------------------------------------------

function debug() {
   [ "$be_verbose" == "true" ] && echo "$@" >&2
}

function debug_parameters() {
   echo "be_verbose='$be_verbose'"
   echo "ignore_error='$ignore_error'"
   echo "interactive='$interactive'"
   echo "prefix_with_hostname='$prefix_with_hostname'"
   echo "host_list='$host_list'"
   echo "remote_user='$remote_user'"
   echo "command='$command'"
   echo "do_commandline='$do_commandline'"
   echo "local_file='$local_file'"
   echo "remote_file='$remote_file'"
   echo "exec_params='${exec_params[@]}'"
}

#--------------------------------------------------------------
# unit tests
# enable by uncommenting run_unit_tests in main
#--------------------------------------------------------------

function run_unit_tests() {
   set -e
   for t in test_parse_parameters_do \
            test_parse_parameters_put \
            test_parse_parameters_get \
            test_parse_parameters_exec \
            test_parse_parameters_singlehost \
            test_parse_parameters_hostlist \
            test_parse_parameters_term; do
      echo -n "running test $t : "
      eval $t
      echo successfull
   done
   exit 0
}

# Generic command lines looks like these:
#
#    on host_list [as remote_user] do   "some; commands and -options"
#    on host_list [as remote_user] get  /remote/file [/local/file]
#    on host_list [as remote_user] put  /local/file  [/remote/file]
#    on host_list [as remote_user] exec /local/file  ["some args"]*
#    on host_list [as remote_user] term
#    on host_list                  list
#
function test_parse_parameters_do() {
   # test 1: on windÃ¶z as Administrator do "deltree c:\"
   reset_parameters
   parse_parameters -p windÃ¶z as Administrator 'do' 'deltree c:\'
   local res=$( debug_parameters )
   local corr=$( cat<<-EOC
		be_verbose='false'
		ignore_error='false'
		interactive='non-interactive'
		prefix_with_hostname='true'
		host_list='windÃ¶z'
		remote_user='Administrator'
		command='do'
		do_commandline='deltree c:\'
		local_file=''
		remote_file=''
		exec_params=''
		EOC
              )
   [ "$res" == "$corr" ]
}

function test_parse_parameters_put() {
   # test 2: on -v gagamachines put faighl1 /paat/faighl2
   reset_parameters
   parse_parameters -v -p gagamachines put faighl1 /paat/faighl2
   res=$( debug_parameters )
   corr=$(cat<<-EOC
		be_verbose='true'
		ignore_error='false'
		interactive='non-interactive'
		prefix_with_hostname='true'
		host_list='gagamachines'
		remote_user=''
		command='put'
		do_commandline=''
		local_file='faighl1'
		remote_file='/paat/faighl2'
		exec_params=''
		EOC
              )
  [ "$res" == "$corr" ]
}

function test_parse_parameters_get() {
   # test 2: on -v gagamachines get faighl1
   reset_parameters
   parse_parameters -v -p gagamachines get faighl1
   res=$( debug_parameters )
   corr=$(cat<<-EOC
		be_verbose='true'
		ignore_error='false'
		interactive='non-interactive'
		prefix_with_hostname='true'
		host_list='gagamachines'
		remote_user=''
		command='get'
		do_commandline=''
		local_file='faighl1'
		remote_file='faighl1'
		exec_params=''
		EOC
              )
  [ "$res" == "$corr" ]
}

function test_parse_parameters_exec() {
   # test 3: on -f zOS exec install_debian --force --really-force
   reset_parameters
   parse_parameters -f zOS exec install_debian --force --really-force
   res=$( debug_parameters )
   corr=$(cat<<-EOC
		be_verbose='false'
		ignore_error='true'
		interactive='non-interactive'
		prefix_with_hostname='false'
		host_list='zOS'
		remote_user=''
		command='exec'
		do_commandline=''
		local_file='install_debian'
		remote_file=''
		exec_params='--force --really-force'
		EOC
              )
  [ "$res" == "$corr" ]
}

function test_parse_parameters_singlehost() {
   # test 4: on -i mylaptop exec install_debian --force --really-force
   reset_parameters
   parse_parameters -i mylaptop exec install_debian --force --really-force
   res=$( debug_parameters )
   corr=$(cat<<-EOC
		be_verbose='false'
		ignore_error='false'
		interactive='interactive'
		prefix_with_hostname='false'
		host_list='mylaptop'
		remote_user=''
		command='exec'
		do_commandline=''
		local_file='install_debian'
		remote_file=''
		exec_params='--force --really-force'
		EOC
              )
  [ "$res" == "$corr" ]
}

function test_parse_parameters_hostlist() {
   # test 5: on -f -i mylaptop myserver exec install_debian --force --really-force
   reset_parameters
   parse_parameters -f -i mylaptop myserver exec install_debian --force --really-force
   res=$( debug_parameters )
   corr=$(cat<<-EOC
		be_verbose='false'
		ignore_error='true'
		interactive='interactive'
		prefix_with_hostname='false'
		host_list='mylaptop myserver'
		remote_user=''
		command='exec'
		do_commandline=''
		local_file='install_debian'
		remote_file=''
		exec_params='--force --really-force'
		EOC
              )
  [ "$res" == "$corr" ]
}

function test_parse_parameters_term() {
   # test 6: on GoogleServers as elite term
   reset_parameters
   parse_parameters GoogleServers as elite term
   res=$( debug_parameters )
   corr=$(cat<<-EOC
		be_verbose='false'
		ignore_error='false'
		interactive='non-interactive'
		prefix_with_hostname='false'
		host_list='GoogleServers'
		remote_user='elite'
		command='term'
		do_commandline=''
		local_file=''
		remote_file=''
		exec_params=''
		EOC
              )
  [ "$res" == "$corr" ]
}

#--------------------------------------------------------------
# main
#--------------------------------------------------------------

# run_unit_tests # uncomment to run them

# include on configuration and settings
[ -e ~/.on.config ] && . ~/.on.config

reset_parameters
parse_parameters "$@"
# resolve host_groups and add users to hosts
host_list=$( resolve_hosts "$host_list" "$remote_user" )
case "$command" in
   do)   do_remote       "$host_list" $interactive "$ssh_options" "$do_commandline" ;;
   get)  get_from_remote "$host_list"              "$ssh_options" "$remote_file" "$local_file" ;;
   put)  put_on_remote   "$host_list"              "$ssh_options" "$local_file"  "$remote_file" ;;
   exec) exec_remote     "$host_list" $interactive "$ssh_options" "$local_file"  "${exec_params[@]}";;
   list) echo            "$host_list" ;;
   term) call_term       "$host_list"              "$ssh_options";;
   *)    usage ;;
esac
